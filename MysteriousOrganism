// Returns a random DNA base
const returnRandBase = () => {
    const dnaBases = ['A', 'T', 'C', 'G']
    return dnaBases[Math.floor(Math.random() * 4)] 
  }
  
  // Returns a random single strand of DNA containing 15 bases
  const mockUpStrand = () => {
    const newStrand = []
    for (let i = 0; i < 15; i++) {
      newStrand.push(returnRandBase())
    }
    return newStrand
  }
  
  const pAequorFactory = (num, arr) => {
    return {
      specimenNum: num,
      dna: arr,
      mutate(){
        const i = Math.floor(Math.random() * 15);
        const dnaBases = ['A', 'T', 'C', 'G'];
        let newBases = [];
        let y;
        //console.log(i);
        //console.log(this.dna[i]);
        if(this.dna[i] === 'A'){
          newBases = ['T', 'C', 'G'];
          y = newBases[Math.floor(Math.random() * 3)]
          //console.log(y)
        } else if(this.dna[i] === 'T'){
          newBases = ['A', 'C', 'G'];
          y = newBases[Math.floor(Math.random() * 3)]
          //console.log(y)
        } else if(this.dna[i] === 'C'){
          newBases = ['A', 'T', 'G'];
          y = newBases[Math.floor(Math.random() * 3)]
          //console.log(y)
        } else {
          newBases = ['A', 'T', 'C'];
          y = newBases[Math.floor(Math.random() * 3)]
          //console.log(y)
        }
        this.dna.splice(i, 1, y);
        return this.dna
      },
      compareDNA(num){
        let sum = 0;
        for(let i = 0; i<15; i++){
          if(this.dna[i] === num.dna[i]){
            sum++;
          } 
         //console.log(sum) 
        } //console.log(sum) 
        return 'specimen '+ this.specimenNum + ' and specimen '+num.specimenNum+' have '+ (sum/15)*100 +'% DNA in common.'
      },
      willLikelySurvive(){
        let store = [];
        let sum = 0;
        for(let i = 0;i<15;i++){
          if(this.dna[i] === 'C' || this.dna[i] === 'G'){
            sum++
          } 
        } 
        let percent = (sum/15)*100
        console.log(percent+'%')
        if(percent >= 60){
          store.push(this.specimenNum)
          return true
        } else {
          return false
        }
        //console.log(store);
      },
      complementStrand(){
        let comp = [];
        for(let i=0; i<15; i++){
          if(this.dna[i] === 'A'){
            comp.push('T');
          } else if(this.dna[i] === 'T'){
            comp.push('A');
          } else if(this.dna[i] === 'G'){
            comp.push('C');
          } else if(this.dna[i] === 'C'){
            comp.push('G');
          }
        } return comp
      },
    } 
  }
  
  const one = pAequorFactory(1, mockUpStrand());
  const two = pAequorFactory(2, mockUpStrand());
  console.log(one.dna.join(' '));
  //console.log(one.mutate());
  
  //console.log(two.dna);
  //console.log(two.mutate());
  
  //console.log(one.compareDNA(two))
  
  //console.log(one.willLikelySurvive())
  
  console.log(one.complementStrand().join(' '));
  
  
  
  
  
  
  
  
